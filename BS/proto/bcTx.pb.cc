// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bcTx.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bcTx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BsTxMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BsTxMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BsfkMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BsfkMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bcTx_2eproto() {
  protobuf_AddDesc_bcTx_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bcTx.proto");
  GOOGLE_CHECK(file != NULL);
  BsTxMsg_descriptor_ = file->message_type(0);
  static const int BsTxMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsTxMsg, nserialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsTxMsg, nqtscardnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsTxMsg, nqtdcategory_),
  };
  BsTxMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BsTxMsg_descriptor_,
      BsTxMsg::default_instance_,
      BsTxMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsTxMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsTxMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BsTxMsg));
  BsfkMsg_descriptor_ = file->message_type(1);
  static const int BsfkMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsfkMsg, nserialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsfkMsg, nres_),
  };
  BsfkMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BsfkMsg_descriptor_,
      BsfkMsg::default_instance_,
      BsfkMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsfkMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BsfkMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BsfkMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bcTx_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BsTxMsg_descriptor_, &BsTxMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BsfkMsg_descriptor_, &BsfkMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bcTx_2eproto() {
  delete BsTxMsg::default_instance_;
  delete BsTxMsg_reflection_;
  delete BsfkMsg::default_instance_;
  delete BsfkMsg_reflection_;
}

void protobuf_AddDesc_bcTx_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nbcTx.proto\"J\n\007BsTxMsg\022\021\n\tnSerialId\030\001 \002"
    "(\r\022\026\n\016nQtscardnumber\030\002 \002(\r\022\024\n\014nQtdcatego"
    "ry\030\003 \002(\r\"*\n\007BsfkMsg\022\021\n\tnSerialId\030\001 \002(\r\022\014"
    "\n\004nRes\030\002 \002(\r", 132);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bcTx.proto", &protobuf_RegisterTypes);
  BsTxMsg::default_instance_ = new BsTxMsg();
  BsfkMsg::default_instance_ = new BsfkMsg();
  BsTxMsg::default_instance_->InitAsDefaultInstance();
  BsfkMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bcTx_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bcTx_2eproto {
  StaticDescriptorInitializer_bcTx_2eproto() {
    protobuf_AddDesc_bcTx_2eproto();
  }
} static_descriptor_initializer_bcTx_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BsTxMsg::kNSerialIdFieldNumber;
const int BsTxMsg::kNQtscardnumberFieldNumber;
const int BsTxMsg::kNQtdcategoryFieldNumber;
#endif  // !_MSC_VER

BsTxMsg::BsTxMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BsTxMsg::InitAsDefaultInstance() {
}

BsTxMsg::BsTxMsg(const BsTxMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BsTxMsg::SharedCtor() {
  _cached_size_ = 0;
  nserialid_ = 0u;
  nqtscardnumber_ = 0u;
  nqtdcategory_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BsTxMsg::~BsTxMsg() {
  SharedDtor();
}

void BsTxMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BsTxMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BsTxMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BsTxMsg_descriptor_;
}

const BsTxMsg& BsTxMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bcTx_2eproto();
  return *default_instance_;
}

BsTxMsg* BsTxMsg::default_instance_ = NULL;

BsTxMsg* BsTxMsg::New() const {
  return new BsTxMsg;
}

void BsTxMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nserialid_ = 0u;
    nqtscardnumber_ = 0u;
    nqtdcategory_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BsTxMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nSerialId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nQtscardnumber;
        break;
      }

      // required uint32 nQtscardnumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nQtscardnumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nqtscardnumber_)));
          set_has_nqtscardnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nQtdcategory;
        break;
      }

      // required uint32 nQtdcategory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nQtdcategory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nqtdcategory_)));
          set_has_nqtdcategory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BsTxMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nSerialId = 1;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nserialid(), output);
  }

  // required uint32 nQtscardnumber = 2;
  if (has_nqtscardnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nqtscardnumber(), output);
  }

  // required uint32 nQtdcategory = 3;
  if (has_nqtdcategory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nqtdcategory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BsTxMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nSerialId = 1;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nserialid(), target);
  }

  // required uint32 nQtscardnumber = 2;
  if (has_nqtscardnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nqtscardnumber(), target);
  }

  // required uint32 nQtdcategory = 3;
  if (has_nqtdcategory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nqtdcategory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BsTxMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nSerialId = 1;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nserialid());
    }

    // required uint32 nQtscardnumber = 2;
    if (has_nqtscardnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nqtscardnumber());
    }

    // required uint32 nQtdcategory = 3;
    if (has_nqtdcategory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nqtdcategory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BsTxMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BsTxMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BsTxMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BsTxMsg::MergeFrom(const BsTxMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
    if (from.has_nqtscardnumber()) {
      set_nqtscardnumber(from.nqtscardnumber());
    }
    if (from.has_nqtdcategory()) {
      set_nqtdcategory(from.nqtdcategory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BsTxMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BsTxMsg::CopyFrom(const BsTxMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BsTxMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BsTxMsg::Swap(BsTxMsg* other) {
  if (other != this) {
    std::swap(nserialid_, other->nserialid_);
    std::swap(nqtscardnumber_, other->nqtscardnumber_);
    std::swap(nqtdcategory_, other->nqtdcategory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BsTxMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BsTxMsg_descriptor_;
  metadata.reflection = BsTxMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BsfkMsg::kNSerialIdFieldNumber;
const int BsfkMsg::kNResFieldNumber;
#endif  // !_MSC_VER

BsfkMsg::BsfkMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BsfkMsg::InitAsDefaultInstance() {
}

BsfkMsg::BsfkMsg(const BsfkMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BsfkMsg::SharedCtor() {
  _cached_size_ = 0;
  nserialid_ = 0u;
  nres_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BsfkMsg::~BsfkMsg() {
  SharedDtor();
}

void BsfkMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BsfkMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BsfkMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BsfkMsg_descriptor_;
}

const BsfkMsg& BsfkMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bcTx_2eproto();
  return *default_instance_;
}

BsfkMsg* BsfkMsg::default_instance_ = NULL;

BsfkMsg* BsfkMsg::New() const {
  return new BsfkMsg;
}

void BsfkMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nserialid_ = 0u;
    nres_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BsfkMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nSerialId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nRes;
        break;
      }

      // required uint32 nRes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nres_)));
          set_has_nres();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BsfkMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nSerialId = 1;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nserialid(), output);
  }

  // required uint32 nRes = 2;
  if (has_nres()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nres(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BsfkMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nSerialId = 1;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nserialid(), target);
  }

  // required uint32 nRes = 2;
  if (has_nres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nres(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BsfkMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nSerialId = 1;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nserialid());
    }

    // required uint32 nRes = 2;
    if (has_nres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nres());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BsfkMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BsfkMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BsfkMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BsfkMsg::MergeFrom(const BsfkMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
    if (from.has_nres()) {
      set_nres(from.nres());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BsfkMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BsfkMsg::CopyFrom(const BsfkMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BsfkMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BsfkMsg::Swap(BsfkMsg* other) {
  if (other != this) {
    std::swap(nserialid_, other->nserialid_);
    std::swap(nres_, other->nres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BsfkMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BsfkMsg_descriptor_;
  metadata.reflection = BsfkMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
